# Generated by home-manager
# UI options
# User modes
# Key mappings
# Hooks
# Generated by home-manager
# UI options
# User modes
# Key mappings
# Hooks
try %{ source "%val{runtime}/autoload/plugins/plug.kak/rc/plug.kak"┬а}

plug "andreyorst/plug.kak" noload

plug "andreyorst/base16-gruvbox.kak" theme config %{
  colorscheme base16-gruvbox-dark-soft
}

plug "andreyorst/fzf.kak" config %{
  map global normal <c-p> ': fzf-mode<ret>'
}

# should be built outside this config in a custom build environment(nix pkg)
plug "kak-lsp/kak-lsp" do %{
  cargo install --locked --force --path .
}

plug "andreyorst/smarttab.kak" demand smarttab %{
  set-option global softtabstop 4
} config %{
  expandtab
  hook global WinSetOption filetype=nix %{
    expandtab
    set-option buffer tabstop 2
    set-option buffer indentwidth 2
  }
  hook global WinSetOption filetype=yaml %{
    expandtab
    set-option buffer tabstop 2
    set-option buffer indentwidth 2
  }
  hook global WinSetOption filetype=makefile %{
    noexpandtab
  }
  hook global WinSetOption filetype=python %{
    expandtab
    set-option buffer tabstop 4
    set-option buffer indentwidth 4
  }
  hook global WinSetOption filetype=rust %{
    expandtab
    set-option buffer tabstop 4
    set-option buffer indentwidth 4
  }
  hook global WinSetOption filetype=haskell %{
    expandtab
    set buffer indentwidth 4
    set buffer tabstop 4
  }
  hook global WinSetOption filetype=kak %{
    expandtab
    set buffer indentwidth 2
    set buffer tabstop 2
  }
}

plug "alexherbo2/surround.kak" defer surround %{
  map global user s ': surround<ret>' -docstring 'Enter surround mode'
  map global normal <a-s> ':surround<ret>' -docstring 'Enter surround mode'
}

plug "alexherbo2/auto-pairs.kak" demand %{
  echo "auto-pairs loaded"
  hook global WinCreate .* %{
    echo "auto-pairs hook on WinCreate"
    enable-auto-pairs
  }
}

hook global KakBegin .* %{
  declare-user-mode git
}
map global normal <c-g> ':enter-user-mode git<ret>'
plug "alexherbo2/git.kak" defer git %{
  # map keybindings
  map global git w ':gw<ret>' -docstring 'save and stage file'
  map global git c ':gc<ret>' -docstring 'commit file changes'
}

plug "alexherbo2/tmux.kak" defer tmux %{
  # keybindings
}

# support ansi codes rendering
plug "eraserhd/kak-ansi"

set-option global tabstop 2
set-option global indentwidth 2
#set-option global termcmd 'tmux split-window sh -c'

map global normal <#> ': comment-line<ret>'
map global normal <a-#> ': comment-block<ret>'
map global normal <c-q> ':quit<ret>'
# map global goto P '/(?=\n\n)\w<ret>' #
map -docstring "file reference" global goto 'p' '<esc>s(/?(?:[^/]+/)*[^:/]+)(?::(\d+)(?::(\d+))?)?<ret>:edit %reg{1} %reg{2} %reg{3}<ret><space>;'

hook global WinSetOption filetype=nix %{
  set-option buffer formatcmd "nixfmt"
  set-option buffer makecmd "nix flake"
}

hook global WinSetOption filetype=javascript %{
  set buffer lintcmd './node_modules/.bin/eslint --format=node_modules/eslint-formatter-kakoune -c .eslintrc.yml'
  lint-enable
  set buffer formatcmd "./node_modules/.bin/prettier --stdin-filepath ${kak_buffile}"
}

hook global WinSetOption filetype=css %{
  lint-enable
  set buffer comment_block_begin "/*"
  set buffer comment_block_end "*/"
}

hook global WinSetOption filetype=markdown %{
  remove-highlighter buffer/wrapping
  add-highlighter buffer/wrapping wrap -width 120 -marker 'той ' -word
}

hook global BufSetOption filetype=rust %{
  set buffer makecmd "cargo build"
  set buffer formatcmd "rustfmt --emit stdout"
  set buffer lintcmd "cargo check"

  # Enable LSP
  lsp-enable-window

  # Auto-formatting on save
  hook window BufWritePre .* lsp-formatting-sync

  # Configure inlay hints (only on save)
  hook window -group rust-inlay-hints BufWritePost .* rust-analyzer-inlay-hints
  hook -once -always window WinSetOption filetype=.* %{
    remove-hooks window rust-inlay-hints
  }
}

hook global WinCreate .* %{
  add-highlighter global/wrapping wrap -marker 'той '
  add-highlighter global/matching show-matching
}

hook global WinCreate ^[^*]+$ %{ try %{editorconfig-load}}
hook global BufOpenFile .* %{ try %{editorconfig-load} }
hook global BufNewFile .* %{ try %{ editorconfig-load } }

define-command -override eval-selection %{
  evaluate-commands %{
    eval %val{selections}
  }
}

def -override mkdir %{
  nop %sh{ mkdir -p $(dirname $kak_buffile) }
}

def -override ide -params 1 %{
  rename-session %arg{1}
  
  set-option global jumpclient main
  set-option global toolsclient tools
  set-option global docsclient docs

  try %{
    evaluate-commands -client main nop
  } catch %{
    rename-client main
  }
  try %{
    evaluate-commands -client tools nop
  } catch %{
    new rename-client tools
  }
  try %{
    evaluate-commands -client docs nop
  } catch %{
    new rename-client docs
  }
}


def -override insert_unicode -params 1 %{
  execute-keys '! grep -i "$1" ~/.config/kak/unicode.txt | cut -d\; -f1 | ascii2uni -q -a R -p'
}

def -override reload_config %{
  source "%val{config}/kakrc"
}

def -override edit_config %{
  try %{ edit "%val{config}/kakrc" }
}

def -override pager %{
  set-option buffer readonly true
}
plug "andreyorst/powerline.kak" defer powerline_gruvbox %{
      powerline-theme gruvbox
} config %{
      powerline-start
}

define-command -override spawn -params 2 %{
  evaluate-commands %sh{
     # Create a temporary fifo for communication
     output=$(mktemp -d -t kak-temp-XXXXXXXX)/fifo
     mkfifo $${output}
     # run command detached from the shell
     { $kak_arg_2 > $${output} } > /dev/null < /dev/null &
     # Open the file in Kakoune and add a hook to remove the fifo
     echo "edit! -fifo $${output} $kak_arg_1
           hook buffer BufClose .* %{ nop %sh{ rm -r $(dirname $${output})} }"
  }
}

